// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  ADMIN
}

enum Type {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

enum Subject {
  MATH
  ENGLISH
  SCIENCE
  HISTORY
  GEOGRAPHY
  COMPUTER_SCIENCE
  PHYSICS
  CHEMISTRY
  BIOLOGY
  ECONOMICS
  CIVICS
  GOVERNMENT
  LITERATURE
  ART
  MUSIC
  SPORT
  HEALTH
  SPANISH
  FRENCH
  GERMAN
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  role      Role       @default(TEACHER)
  email     String     @unique
  photo     String?
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
  tests     Test[]
  exam      Exam[]
}

model Question {
  id            Int            @id @default(autoincrement())
  title         String
  author        User?          @relation(fields: [authorId], references: [id])
  type          Type
  answers       Json
  createdAt     DateTime       @default(now())
  authorId      Int?
  subject       Subject?
  testQuestions TestQuestion[]
}

model Test {
  id            Int            @id @default(autoincrement())
  name          String
  image         String?
  description   String
  subject       Subject?
  authorId      Int?
  author        User?          @relation(fields: [authorId], references: [id])
  createdAt     DateTime       @default(now())
  testQuestions TestQuestion[]
  exam          Exam[]
}

model TestQuestion {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  test       Test     @relation(fields: [testId], references: [id])
  maxScore   Int
  timeLimit  Int
  testId     Int
  questionId Int
  results    Result[]
}

model Result {
  id             Int          @id @default(autoincrement())
  exam           Exam         @relation(fields: [examId], references: [id])
  testQuestion   TestQuestion @relation(fields: [testQuestionId], references: [id])
  studentName    String
  studentAnswer  Json?
  testQuestionId Int
  examId         Int
}

model Exam {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  test      Test     @relation(fields: [testId], references: [id])
  results   Result[]
  authorId  Int
  testId    Int
  createdAt DateTime @default(now())
}
